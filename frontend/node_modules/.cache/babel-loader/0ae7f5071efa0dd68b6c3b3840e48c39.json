{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst Emitter = require(\"component-emitter\");\nconst on_1 = require(\"./on\");\nconst debug = require(\"debug\")(\"socket.io-client:socket\");\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\nclass Socket extends Emitter {\n  /**\n   * `Socket` constructor.\n   *\n   * @public\n   */\n  constructor(io, nsp, opts) {\n    super();\n    this.receiveBuffer = [];\n    this.sendBuffer = [];\n    this.ids = 0;\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n    this.ids = 0;\n    this.acks = {};\n    this.receiveBuffer = [];\n    this.sendBuffer = [];\n    this.connected = false;\n    this.disconnected = true;\n    this.flags = {};\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n    if (this.io._autoConnect) this.open();\n  }\n  /**\n   * Subscribe to open, close and packet events\n   *\n   * @private\n   */\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [on_1.on(io, \"open\", this.onopen.bind(this)), on_1.on(io, \"packet\", this.onpacket.bind(this)), on_1.on(io, \"error\", this.onerror.bind(this)), on_1.on(io, \"close\", this.onclose.bind(this))];\n  }\n  /**\n   * Whether the Socket will try to reconnect when its Manager connects or reconnects\n   */\n  get active() {\n    return !!this.subs;\n  }\n  /**\n   * \"Opens\" the socket.\n   *\n   * @public\n   */\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  /**\n   * Alias for connect()\n   */\n  open() {\n    return this.connect();\n  }\n  /**\n   * Sends a `message` event.\n   *\n   * @return self\n   * @public\n   */\n  send(...args) {\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  /**\n   * Override `emit`.\n   * If the event is in `events`, it's emitted normally.\n   *\n   * @param ev - event name\n   * @return self\n   * @public\n   */\n  emit(ev, ...args) {\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev + '\" is a reserved event name');\n    }\n    args.unshift(ev);\n    const packet = {\n      type: socket_io_parser_1.PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false;\n    // event ack callback\n    if (\"function\" === typeof args[args.length - 1]) {\n      debug(\"emitting packet with ack id %d\", this.ids);\n      this.acks[this.ids] = args.pop();\n      packet.id = this.ids++;\n    }\n    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n    if (discardPacket) {\n      debug(\"discard packet as the transport is not currently writable\");\n    } else if (this.connected) {\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n    this.flags = {};\n    return this;\n  }\n  /**\n   * Sends a packet.\n   *\n   * @param packet\n   * @private\n   */\n  packet(packet) {\n    packet.nsp = this.nsp;\n    this.io._packet(packet);\n  }\n  /**\n   * Called upon engine `open`.\n   *\n   * @private\n   */\n  onopen() {\n    debug(\"transport is open - connecting\");\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this.packet({\n          type: socket_io_parser_1.PacketType.CONNECT,\n          data\n        });\n      });\n    } else {\n      this.packet({\n        type: socket_io_parser_1.PacketType.CONNECT,\n        data: this.auth\n      });\n    }\n  }\n  /**\n   * Called upon engine or manager `error`.\n   *\n   * @param err\n   * @private\n   */\n  onerror(err) {\n    if (!this.connected) {\n      super.emit(\"connect_error\", err);\n    }\n  }\n  /**\n   * Called upon engine `close`.\n   *\n   * @param reason\n   * @private\n   */\n  onclose(reason) {\n    debug(\"close (%s)\", reason);\n    this.connected = false;\n    this.disconnected = true;\n    delete this.id;\n    super.emit(\"disconnect\", reason);\n  }\n  /**\n   * Called with socket packet.\n   *\n   * @param packet\n   * @private\n   */\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n    switch (packet.type) {\n      case socket_io_parser_1.PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          const id = packet.data.sid;\n          this.onconnect(id);\n        } else {\n          super.emit(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n        break;\n      case socket_io_parser_1.PacketType.EVENT:\n        this.onevent(packet);\n        break;\n      case socket_io_parser_1.PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n      case socket_io_parser_1.PacketType.ACK:\n        this.onack(packet);\n        break;\n      case socket_io_parser_1.PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n      case socket_io_parser_1.PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n      case socket_io_parser_1.PacketType.CONNECT_ERROR:\n        const err = new Error(packet.data.message);\n        // @ts-ignore\n        err.data = packet.data.data;\n        super.emit(\"connect_error\", err);\n        break;\n    }\n  }\n  /**\n   * Called upon a server event.\n   *\n   * @param packet\n   * @private\n   */\n  onevent(packet) {\n    const args = packet.data || [];\n    debug(\"emitting event %j\", args);\n    if (null != packet.id) {\n      debug(\"attaching ack callback to event\");\n      args.push(this.ack(packet.id));\n    }\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n    super.emit.apply(this, args);\n  }\n  /**\n   * Produces an ack callback to emit with an event.\n   *\n   * @private\n   */\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function (...args) {\n      // prevent double callbacks\n      if (sent) return;\n      sent = true;\n      debug(\"sending ack %j\", args);\n      self.packet({\n        type: socket_io_parser_1.PacketType.ACK,\n        id: id,\n        data: args\n      });\n    };\n  }\n  /**\n   * Called upon a server acknowlegement.\n   *\n   * @param packet\n   * @private\n   */\n  onack(packet) {\n    const ack = this.acks[packet.id];\n    if (\"function\" === typeof ack) {\n      debug(\"calling ack %s with %j\", packet.id, packet.data);\n      ack.apply(this, packet.data);\n      delete this.acks[packet.id];\n    } else {\n      debug(\"bad ack %s\", packet.id);\n    }\n  }\n  /**\n   * Called upon server connect.\n   *\n   * @private\n   */\n  onconnect(id) {\n    debug(\"socket connected with id %s\", id);\n    this.id = id;\n    this.connected = true;\n    this.disconnected = false;\n    super.emit(\"connect\");\n    this.emitBuffered();\n  }\n  /**\n   * Emit buffered events (received and emitted).\n   *\n   * @private\n   */\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => this.packet(packet));\n    this.sendBuffer = [];\n  }\n  /**\n   * Called upon server disconnect.\n   *\n   * @private\n   */\n  ondisconnect() {\n    debug(\"server disconnect (%s)\", this.nsp);\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  /**\n   * Called upon forced client/server side disconnections,\n   * this method ensures the manager stops tracking us and\n   * that reconnections don't get triggered for this.\n   *\n   * @private\n   */\n  destroy() {\n    if (this.subs) {\n      // clean subscriptions to avoid reconnections\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = undefined;\n    }\n    this.io[\"_destroy\"](this);\n  }\n  /**\n   * Disconnects the socket manually.\n   *\n   * @return self\n   * @public\n   */\n  disconnect() {\n    if (this.connected) {\n      debug(\"performing disconnect (%s)\", this.nsp);\n      this.packet({\n        type: socket_io_parser_1.PacketType.DISCONNECT\n      });\n    }\n    // remove socket from pool\n    this.destroy();\n    if (this.connected) {\n      // fire events\n      this.onclose(\"io client disconnect\");\n    }\n    return this;\n  }\n  /**\n   * Alias for disconnect()\n   *\n   * @return self\n   * @public\n   */\n  close() {\n    return this.disconnect();\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return self\n   * @public\n   */\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n   * ready to send messages.\n   *\n   * @returns self\n   * @public\n   */\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback.\n   *\n   * @param listener\n   * @public\n   */\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.push(listener);\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback. The listener is added to the beginning of the listeners array.\n   *\n   * @param listener\n   * @public\n   */\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.unshift(listener);\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is emitted.\n   *\n   * @param listener\n   * @public\n   */\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   *\n   * @public\n   */\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n}\nexports.Socket = Socket;","map":{"version":3,"names":["Object","defineProperty","exports","value","Socket","socket_io_parser_1","require","Emitter","on_1","debug","RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","constructor","io","nsp","opts","receiveBuffer","sendBuffer","ids","acks","flags","connected","disconnected","auth","_autoConnect","open","subEvents","subs","on","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","PacketType","EVENT","data","options","compress","length","pop","id","isTransportWritable","engine","transport","writable","discardPacket","volatile","push","_packet","CONNECT","err","reason","sameNamespace","sid","onconnect","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","CONNECT_ERROR","message","ack","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","destroy","subDestroy","undefined","close","onAny","prependAny","offAny","i","splice","listenersAny"],"sources":["/Users/kaualandi/dev/atendechat-novo-main/frontend/node_modules/socket.io-client/build/socket.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst Emitter = require(\"component-emitter\");\nconst on_1 = require(\"./on\");\nconst debug = require(\"debug\")(\"socket.io-client:socket\");\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nclass Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        this.ids = 0;\n        this.acks = {};\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.connected = false;\n        this.disconnected = true;\n        this.flags = {};\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on_1.on(io, \"open\", this.onopen.bind(this)),\n            on_1.on(io, \"packet\", this.onpacket.bind(this)),\n            on_1.on(io, \"error\", this.onerror.bind(this)),\n            on_1.on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @param ev - event name\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            debug(\"emitting packet with ack id %d\", this.ids);\n            this.acks[this.ids] = args.pop();\n            packet.id = this.ids++;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n            debug(\"discard packet as the transport is not currently writable\");\n        }\n        else if (this.connected) {\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"transport is open - connecting\");\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            super.emit(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n    onclose(reason) {\n        debug(\"close (%s)\", reason);\n        this.connected = false;\n        this.disconnected = true;\n        delete this.id;\n        super.emit(\"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    super.emit(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case socket_io_parser_1.PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                super.emit(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            debug(\"sending ack %j\", args);\n            self.packet({\n                type: socket_io_parser_1.PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        debug(\"socket connected with id %s\", id);\n        this.id = id;\n        this.connected = true;\n        this.disconnected = false;\n        super.emit(\"connect\");\n        this.emitBuffered();\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => this.packet(packet));\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"server disconnect (%s)\", this.nsp);\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            debug(\"performing disconnect (%s)\", this.nsp);\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n}\nexports.Socket = Socket;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}